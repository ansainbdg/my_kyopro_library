{
	"input": {
		"prefix": "inputint",
		"body": [
			"int(input())"
		]
	},
	"inputlist": {
		"prefix": "listinputint",
		"body": [
			"list(map(int, input().split()))"
		]
	},
	"inputmap": {
		"prefix": "mapinputint",
		"body": [
			"map(int, input().split())"
		]
	},
	"inputdlist": {
		"prefix": "listlistinputint",
		"body": [
			"[list(map(int, input().split())) for i in range(n)]"
		]
	},
	"forrange": {
		"prefix": "forrange",
		"body": [
			"for $1 in range($2):"
		]
	},
	"inputstrlist": {
		"prefix": "listinputstr",
		"body": [
			"list(input())"
		]
	},
	"print": {
		"prefix": "print",
		"body": [
			"print($1)"
		]
	},
	"printlist": {
		"prefix": "printlist",
		"body": [
			"print(*$1, sep='\\n')"
		]
	},
	"inputtate": {
		"prefix": "intlistinput",
		"body": [
			"[int(input()) for i in range(n)]"
		]
	},
	"comb": {
		"prefix": "comb",
		"body": [
			"list(combinations($1,2))"
		]
	},
	"perm": {
		"prefix": "perm",
		"body": [
			"list(permutations($1))"
		]
	},
	"prod": {
		"prefix": "prod",
		"body": [
			"list(product([0,1],repeat=$1))"
		]
	},
	"combrep": {
		"prefix": "combrep",
		"body": [
			"list(itertools.combinations_with_replacement($1,5))"
		]
	},
	"bisimp": {
		"prefix": "bisimp",
		"body": [
			"import bisect"
		]
	},
	"bisectl": {
		"prefix": "bisectl",
		"body": [
			"=bisect_left($1, n) #n未満の個数を数える"
		]
	},
	"bisectr": {
		"prefix": "bisectr",
		"body": [
			"=bisect_right($1, n) #n以下の個数を数える"
		]
	},
	"groupby": {
		"prefix": "groupby",
		"body": [
			"for key, value in groupby($1): #key:groupbyでグループ分けした値 value:グループのイテレータ",
			"    key",
			"    len(list(value))"
		]
	},
	"dtype": {
		"prefix": "dtype",
		"body": [
			"dtype=np.int64"
		]
	},
	"njit": {
		"prefix": "njit",
		"body": [
			"@njit('i8(i8, i8[:, :])',cache=True)"
		]
	},
	"lambda": {
		"prefix": "lambda",
		"body": [
			"lambda x: int(x)-1"
		]
	}
}